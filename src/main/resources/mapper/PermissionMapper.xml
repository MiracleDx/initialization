<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dongx.initialization.mapper.PermissionMapper">
  <resultMap id="BaseResultMap" type="com.dongx.initialization.entity.Permission">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, description, url, pid
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blog_permission
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_permission
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.dongx.initialization.entity.Permission">
    insert into blog_permission (id, name, description, 
      url, pid)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{pid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.dongx.initialization.entity.Permission">
    insert into blog_permission
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="pid != null">
        pid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.dongx.initialization.entity.Permission">
    update blog_permission
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dongx.initialization.entity.Permission">
    update blog_permission
    set name = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="findAll" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from blog_permission;
  </select>
  
  <select id="findByUserid" parameterType="string" resultMap="BaseResultMap">
    SELECT 
      p.id, p.name, p.description, p.url, p.pid
    FROM
      blog_user u
    LEFT JOIN
      blog_user_role ur
    ON 
      u.id = ur.user_id
    LEFT JOIN
      blog_role r
    ON 
      ur.role_id = r.id
    LEFT JOIN 
      blog_permission_role pr
    ON 
      pr.role_id = r.id
    LEFT JOIN 
      blog_permission p
    ON 
      p.id = pr.permission_id
    WHERE 
      u.id = #{userid} 
  </select>
</mapper>